<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2002</year><year>2009</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>megaco_codec_transform</title>
    <prepared>Micael Karlberg</prepared>
    <responsible>Micael Karlberg</responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2007-06-15</date>
    <rev>%VSN%</rev>
    <file>megaco_codec_transform.xml</file>
  </header>
  <module>megaco_codec_transform</module>
  <modulesummary>Megaco message transformation utility.</modulesummary>
  <description>
    <p>This module implements a simple megaco message transformation utility.</p>
    <p><em>Note</em> that this module is <em>not</em> included in the runtime part of 
      the application.</p>
  </description>
  <funcs>
    <func>
      <name>tt() -> void()</name>
      <fsummary></fsummary>
      <desc>
        <p>Transform messages using pretty text as base. Transform messages from pretty 
          text encoding to compact, ber, per and erlang encoding.</p>
        <p>This call is equivalent to the call: 
          <c><![CDATA[t(pretty, [compact, ber, per, erlang])]]></c></p>
      </desc>
    </func>
    <func>
      <name>tb() -> void()</name>
      <fsummary></fsummary>
      <desc>
        <p>Transform messages using ber binary as base. Transform messages from ber 
          binary encoding to pretty, compact, ber, per and erlang encoding.</p>
        <p>This call is equivalent to the call: 
          <c><![CDATA[t(ber, [pretty, compact, per, erlang])]]></c></p>
      </desc>
    </func>
    <func>
      <name>t([FromCodec, ToCodecs]) -> ok | {error, Reason}</name>
      <fsummary></fsummary>
      <type>
        <v>FromCodec = codec_string()</v>
        <v>ToCodecs = [codec_string()]</v>
        <v>codec_string() = "pretty" | "compact" | "ber" | "per" | "erlang"</v>
      </type>
      <desc>
        <p>Called from the command line (shell) to transform all messages in a given 
          codec dir to a given list of codec dirs. The dirs will <em>not</em> be created.</p>
        <p>Example: Converts from codec ber to codecs pretty, compact and per</p>
        <code type="none"><![CDATA[
\011  erl -noshell -sname megaco ../ebin \\
\011      -run megaco_codec_transform t ber "pretty compact per" \\
              -s erlang halt
        ]]></code>
      </desc>
    </func>
    <func>
      <name>t(FromCodec, ToCodecs) -> ok | {error, Reason}</name>
      <fsummary></fsummary>
      <type>
        <v>FromCodec = codec()</v>
        <v>ToCodecs = [codec()]</v>
        <v>codec() = pretty | compact | ber | per | erlang</v>
      </type>
      <desc>
        <p>Transforms all messages in a given codec dir to a given list of codec dirs. 
          The dirs will <em>not</em> be created.</p>
      </desc>
    </func>
    <func>
      <name>tmf(FromFile, FromCodec, ToCodec) -> ok | {error, Reason}</name>
      <fsummary></fsummary>
      <type>
        <v>FromFile = string()</v>
        <v>FromCodec = codec()</v>
        <v>ToCodec = codec()</v>
      </type>
      <desc>
        <p>Transform a message in a file encoded with the given codec to another codec. 
          The resulting message is written to file, in the <c><![CDATA[ToCodec]]></c> dir.</p>
      </desc>
    </func>
    <func>
      <name>tm(FromMsg, FromCodec, ToCodec) -> binary()</name>
      <fsummary></fsummary>
      <type>
        <v>FromMsg = binary()</v>
        <v>FromCodec = codec()</v>
        <v>ToCodec = codec()</v>
      </type>
      <desc>
        <p>Tranforms a message binary encoded with the given codec to another codec. 
          The resulting message is returned (as a binary).</p>
      </desc>
    </func>
  </funcs>

</erlref>

