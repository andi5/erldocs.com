<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2000</year><year>2009</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>Testing and tools</title>
    <prepared>H&aring;kan Mattsson</prepared>
    <responsible>H&aring;kan Mattsson</responsible>
    <docno></docno>
    <approved>H&aring;kan Mattsson</approved>
    <checked></checked>
    <date>2007-06-15</date>
    <rev>%VSN%</rev>
    <file>megaco_debug.xml</file>
  </header>

  <section>
    <title>Tracing</title>
    <p>We have instrumented our code in order to enable
      tracing. Running the application with tracing deactivated,
      causes a neglectible performance overhead (an external call to a
      function which returns an atom). Activation of tracing does not
      require any recompilation of the code, since we rely on
      Erlang/OTP's built in support for dynamic trace activation. In
      our case tracing of calls to a given external function.</p>
    <p>Event traces can be viewed in a generic message sequence chart
      tool, that we have written. It can either be used in batch by
      loading event traces from file or interactively, as we are doing
      at demos and when we debug our own code.  The event trace stuff
      can for the moment be found under megaco/utils but, will later
      be documented and released as an own application.</p>
  </section>

  <section>
    <title>Measurement and transformation</title>
    <p>We have included a simple tool for codec measurement and 
      message transformation.</p>
    <p>The tool is located in the example directory.</p>

    <section>
      <title>Requirement</title>
      <list type="bulleted">
        <item>
          <p>Erlang/OTP, version R12B or later.</p>
        </item>
        <item>
          <p>Version 3.7 or later of <em>this</em> application.</p>
        </item>
        <item>
          <p>Version 1.4.7 or later of the <em>asn1</em> application. </p>
        </item>
        <item>
          <p>The flex libraries. Without it, the flex powered codecs cannot 
            be used.</p>
        </item>
      </list>
    </section>

    <section>
      <title>Results</title>
      <p>The results from the measurement run is four excel-compatible textfiles:
        </p>
      <list type="bulleted">
        <item>
          <p>decode_time.xls  -&gt; Decoding result</p>
        </item>
        <item>
          <p>encode_time.xls  -&gt; Encoding result</p>
        </item>
        <item>
          <p>total_time.xls   -&gt; Total (Decoding+encoding) result</p>
        </item>
        <item>
          <p>message_size.xls -&gt; Message size</p>
        </item>
      </list>
    </section>

    <section>
      <title>Instruction</title>
      <p>The tool contain three things:
        </p>
      <list type="bulleted">
        <item>
          <p>The transformation module</p>
        </item>
        <item>
          <p>The measurement module(s)</p>
        </item>
        <item>
          <p>The basic message file archive</p>
        </item>
      </list>

      <section>
        <title>Message Transformation</title>
        <p>The message transformation is done by the transformation module.
          It is used to transform a set of messages encoded with one codec 
          into the other base codec's.</p>
        <p>The transformation can either be done by updating and running 
          the skeleton script provided with the example (<c>trans.sh.skel</c>) 
          or by manually running the code in an erlang shell:  </p>
        <p>Start an erlang node, and make sure it has the path to both
          the latest megaco ebin-dir as well as the dir containing
          the transformation module:</p>
        <code type="none"><![CDATA[
        % erl -pa <path-megaco-ebin-dir> -pa <path-to-tranformation-module-dir>
        Erlang (BEAM) emulator version 5.6 [source]

        Eshell V5.6  (abort with ^G)
        1> megaco_codec_transform:t(pretty, [compact, per, ber, erlang]).
        ...
        2> halt().
        ]]></code>
        <p>Now the messages in the 'pretty' directory has been transformed and
          stored into the other codec dir's.</p>
        <p>It is possible to transform from any codec to any other.</p>
      </section>

      <section>
        <title>Measurement(s)</title>
        <p>There are two different measurement tools: </p>
        <list type="bulleted">
          <item>
            <p><em>meas</em>: </p>
            <p>Used to perform codec measurements. That is, to see what 
              kind of performance can be expected by the different codecs 
              provided by the megaco application. </p>
            <p>The measure is done by iterating over the decode/encode 
              function for approx  2 seconds per message and counting 
              the number of decodes/encodes.</p>
            <p>Is best run by modifying the meas.sh.skel skeleton script
              provided by the tool.</p>
            <p>To run it manually do the following: </p>
              <code type="none"><![CDATA[
        % erl -pa <path-megaco-ebin-dir> -pa <path-to-meas-module-dir>
        Erlang (BEAM) emulator version 5.6 [source]

        Eshell V5.6  (abort with ^G)
        1> megaco_codec_meas:t([pretty, compact, per, ber, erlang]).
        ...
        2> halt().
        ]]></code>
            <p>or to make it even easier, assuming a measure shall be 
              done on all the codecs (as above):</p>
              <code type="none"><![CDATA[
        % erl -noshell -pa <path-megaco-ebin-dir> \\
              -pa <path-to-meas-module-dir> \\
              -s megaco_codec_meas t -s init stop
        ]]></code>
            <p>When run as above (this will take some time), the measurement 
              process is done as followes:</p>
        <pre>
\011  For each codec:
\011      For each message:
\011          Read the message from the file
\011               Detect message version
\011               Measure decode
                       Measure encode
          Write results, encode, decode and total, to file
        </pre>
          </item>

          <item>
            <p><em>mstone1</em>: </p>
            <p>This is an SMP performance monitoring tool. </p>
            <p>It creates a process for each codec config supported by 
              the megaco application and let them run for a specific 
              time (all at the same time), encoding and decoding 
              megaco messages. The number of messages processed in total 
              is the mstone1(1) value. </p>
            <p>Is best run by modifying the mstone1.sh.skel skeleton script
              provided by the tool.</p>
          </item>
        </list>

        <p>Both these tools use the megaco messages stored in the codec dirs 
          (after the transformation has been performed). </p>
      </section>

      <section>
        <title>Message file archive</title>
        <p>This is basically a gzipped tar file of a directory tree with the following
          structure:
          </p>
        <code type="none"><![CDATA[
\011  time_test/pretty/<message-files>
                    compact/
                    per/
                    ber/<message-files>
                    erlang/
        ]]></code>
        <p>The only directories containing any files are the pretty-dir and
          the ber-dir. It's the same messages encoded with different codec's.
          This means it is possible to choose the message basis for the 
          (transformation and) measurement.</p>
        <p>These files include both version 1 and version 2 messages.</p>
        <p>It is of course possible to add and remove messages at will. The
          messages included are the ones used in our own measurements. </p>
      </section>
    </section>

    <section>
      <title>Notes</title>

      <section>
        <title>Binary codecs</title>
        <p>There are two basic ways to use the binary encodings: 
          With package related name and termination id transformation
          (the 'native' encoding config) or without. This transformation 
          converts package related names and termination id's to a more 
          convenient internal form (equivalent with the decoded text message).</p>
        <p>The transformation is done _after_ the actual decode has been 
          done.</p>
        <p>Furthermore, it is possible to make use of a linked in driver that 
          performs some of the decode/encode, decode for ber and encode for per 
          (the 'driver' encoding config).</p>
        <p>Therefor in the tests, binary codecs are tested with four 
          different encoding configs to determine exacly how the
          different options effect the performance: with transformation and 
          without driver ([]), without transformation and without driver 
          ([native]), with transformation and with driver ([driver]) and 
          finally without transformation and with driver ([driver,native]).</p>
      </section>

      <section>
        <title>Included test messages</title>
        <p>Some of these messages are ripped from the call flow examples 
          in an old version of the RFC and others are created to test
          a specific feature of megaco. </p>
      </section>

      <section>
        <title>Measurement tool directory name</title>
        <p>Be sure <em>not</em> no name the directory containing the measurement
          binaries starting with 'megaco-', e.g. megaco-meas. This will
          confuse the erlang application loader (erlang applications
          are named, e.g. megaco-1.0.2).</p>
      </section>
    </section>
  </section>
</chapter>

